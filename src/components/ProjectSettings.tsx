import React, { useState } from 'react';
import { ProjectState } from '../types';
import ProjectSettingsModal from './ProjectSettingsModal';

interface ProjectSettingsProps {
  project: ProjectState;
  setProject: React.Dispatch<React.SetStateAction<ProjectState>>;
}

const ProjectSettings: React.FC<ProjectSettingsProps> = ({ project, setProject }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isCollapsed, setIsCollapsed] = useState(true);

  const handleSave = (updatedProject: ProjectState) => {
    setProject(updatedProject);
  };

  const getWallTypeLabel = (type: string) => {
    const labels = {
      brick: '–ö–∏—Ä–ø–∏—á',
      aerated_concrete: '–ì–∞–∑–æ–±–µ—Ç–æ–Ω',
      concrete: '–ë–µ—Ç–æ–Ω',
      wooden_frame: '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –∫–∞—Ä–∫–∞—Å',
      glued_beam_frame: '–ö–ª–µ–µ–Ω—ã–π –±—Ä—É—Å + –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –∫–∞—Ä–∫–∞—Å'
    };
    return labels[type as keyof typeof labels] || type;
  };

  const getCrampedLabel = (type: string) => {
    const labels = {
      none: '–ù–µ—Ç',
      medium: '–°—Ä–µ–¥–Ω—è—è',
      high: '–í—ã—Å–æ–∫–∞—è'
    };
    return labels[type as keyof typeof labels] || type;
  };

  const getDistanceLabel = (distance: number) => {
    if (distance === 0) return '–ú–µ—Å—Ç–Ω–∞—è (0 –∫–º)';
    if (distance <= 50) return `–ú–µ—Å—Ç–Ω–∞—è (${distance} –∫–º)`;
    if (distance <= 200) return `–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è (${distance} –∫–º)`;
    if (distance <= 500) return `–£–¥–∞–ª–µ–Ω–Ω–∞—è (${distance} –∫–º)`;
    return `–û—á–µ–Ω—å —É–¥–∞–ª–µ–Ω–Ω–∞—è (${distance} –∫–º)`;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏
  const getDistanceCoefficient = (distance: number): number => {
    if (distance <= 0) return 1.0;
    return 1.0 + (Math.ceil(distance / 10) * 0.03);
  };

  return (
    <div className="card">
      <div className="head">
        <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞</h3>
        <div style={{display:'flex',gap:8}}>
          <button className="btn btn-sm" onClick={() => setIsCollapsed(prev => !prev)} title={isCollapsed ? '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å' : '–°–≤–µ—Ä–Ω—É—Ç—å'}>
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              {isCollapsed ? (
                <path d="M12 5v14m-7-7h14"/>
              ) : (
                <path d="M19 9l-7 7-7-7"/>
              )}
            </svg>
          </button>
          <button className="btn btn-sm" onClick={() => setIsModalOpen(true)} title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
            <path d="m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
          </svg>
        </button>
        </div>
      </div>
      
      {!isCollapsed && (
      <div className="settings-overview">
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ */}
        <div className="setting-overview-item main">
          <div className="setting-label">
            <span className="setting-icon">üìã</span>
            <span className="setting-title">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</span>
          </div>
          <div className="setting-value">{project.title}</div>
        </div>

        {/* –°—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å–∞ –ø–æ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
        <div className="setting-overview-item">
          <div className="setting-label">
            <span className="setting-icon">üí∞</span>
            <span className="setting-title">–°—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å–∞ —Ä–∞–±–æ—Ç—ã</span>
          </div>
          <div className="rates-overview">
            <div className="rate-overview-item">
              <span className="rate-label">–≠–∫—Å–ø–µ—Ä—Ç:</span>
              <span className="rate-value">{project.hourlyRates.expert} ‚ÇΩ/—á</span>
            </div>
            <div className="rate-overview-item">
              <span className="rate-label">–ú–∞—Å—Ç–µ—Ä:</span>
              <span className="rate-value">{project.hourlyRates.master} ‚ÇΩ/—á</span>
            </div>
            <div className="rate-overview-item">
              <span className="rate-label">–ü–æ–º–æ—â–Ω–∏–∫:</span>
              <span className="rate-value">{project.hourlyRates.assistant} ‚ÇΩ/—á</span>
            </div>
          </div>
        </div>

        {/* –§–∞–∫—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ */}
        <div className="setting-overview-item">
          <div className="setting-label">
            <span className="setting-icon">‚öôÔ∏è</span>
            <span className="setting-title">–§–∞–∫—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞</span>
          </div>
          <div className="factors-overview">
            <div className="factor-overview-item">
              <span className="factor-label">–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω:</span>
              <span className="factor-value">{getWallTypeLabel(project.factors.wall)}</span>
            </div>
            <div className="factor-overview-item">
              <span className="factor-label">–°—Ç–µ—Å–Ω–µ–Ω–Ω–æ—Å—Ç—å:</span>
              <span className="factor-value">{getCrampedLabel(project.factors.cramped)}</span>
            </div>
            <div className="factor-overview-item">
              <span className="factor-label">–£–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å:</span>
              <span className="factor-value">
                {getDistanceLabel(project.factors.distance)} (√ó{getDistanceCoefficient(project.factors.distance).toFixed(2)})
              </span>
            </div>
          </div>
        </div>
      </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <ProjectSettingsModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        project={project}
        onSave={handleSave}
      />
    </div>
  );
};

export default ProjectSettings;
